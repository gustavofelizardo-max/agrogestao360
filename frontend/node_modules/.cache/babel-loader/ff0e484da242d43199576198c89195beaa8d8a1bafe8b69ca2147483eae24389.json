{"ast":null,"code":"var _jsxFileName = \"/Users/gustavo.felizardo/Desktop/agrogestao360/frontend/src/context/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { api } from '../services/api';\nimport { toast } from 'react-hot-toast';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth deve ser usado dentro de um AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n  // Verificar se há token válido ao carregar\n  useEffect(() => {\n    checkAuthStatus();\n  }, []);\n  const checkAuthStatus = () => {\n    try {\n      const token = localStorage.getItem('token');\n      const userData = localStorage.getItem('user');\n      if (token && userData) {\n        // Verificar se o token não expirou\n        const tokenPayload = JSON.parse(atob(token.split('.')[1]));\n        const currentTime = Date.now() / 1000;\n        if (tokenPayload.exp > currentTime) {\n          // Token ainda válido\n          setUser(JSON.parse(userData));\n          setIsAuthenticated(true);\n\n          // Configurar token no axios\n          api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n        } else {\n          // Token expirado\n          console.log('Token expirado, removendo...');\n          logout();\n        }\n      }\n    } catch (error) {\n      console.error('Erro ao verificar token:', error);\n      logout();\n    } finally {\n      setLoading(false);\n    }\n  };\n  const login = async (email, password) => {\n    try {\n      setLoading(true);\n      const response = await api.post('http://localhost:8000/api/auth/login', {\n        email,\n        password\n      });\n      if (response.data.success) {\n        const {\n          token,\n          user: userData\n        } = response.data;\n\n        // Salvar no localStorage\n        localStorage.setItem('token', token);\n        localStorage.setItem('user', JSON.stringify(userData));\n\n        // Configurar header do axios\n        api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n\n        // Atualizar estado\n        setUser(userData);\n        setIsAuthenticated(true);\n        return {\n          success: true,\n          message: response.data.message\n        };\n      } else {\n        return {\n          success: false,\n          message: response.data.message || 'Erro no login'\n        };\n      }\n    } catch (error) {\n      console.error('Erro no login:', error);\n      let message = 'Erro ao fazer login';\n      if (error.response) {\n        var _error$response$data;\n        message = ((_error$response$data = error.response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Credenciais inválidas';\n      } else if (error.request) {\n        message = 'Erro de conexão. Verifique se o servidor está funcionando.';\n      }\n      return {\n        success: false,\n        message\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n  const logout = () => {\n    // Limpar localStorage\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n\n    // Limpar header do axios\n    delete api.defaults.headers.common['Authorization'];\n\n    // Atualizar estado\n    setUser(null);\n    setIsAuthenticated(false);\n  };\n  const refreshAuth = () => {\n    // Função para recarregar dados de autenticação\n    checkAuthStatus();\n  };\n  const value = {\n    user,\n    isAuthenticated,\n    loading,\n    login,\n    logout,\n    refreshAuth\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"xBgiRagNfQVCfEr2dT2PptfN+TE=\");\n_c = AuthProvider;\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","api","toast","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","isAuthenticated","setIsAuthenticated","checkAuthStatus","token","localStorage","getItem","userData","tokenPayload","JSON","parse","atob","split","currentTime","Date","now","exp","defaults","headers","common","console","log","logout","error","login","email","password","response","post","data","success","setItem","stringify","message","_error$response$data","request","removeItem","refreshAuth","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/gustavo.felizardo/Desktop/agrogestao360/frontend/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\nimport { api } from '../services/api';\nimport { toast } from 'react-hot-toast';\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth deve ser usado dentro de um AuthProvider');\n  }\n  return context;\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n  // Verificar se há token válido ao carregar\n  useEffect(() => {\n    checkAuthStatus();\n  }, []);\n\n  const checkAuthStatus = () => {\n    try {\n      const token = localStorage.getItem('token');\n      const userData = localStorage.getItem('user');\n\n      if (token && userData) {\n        // Verificar se o token não expirou\n        const tokenPayload = JSON.parse(atob(token.split('.')[1]));\n        const currentTime = Date.now() / 1000;\n\n        if (tokenPayload.exp > currentTime) {\n          // Token ainda válido\n          setUser(JSON.parse(userData));\n          setIsAuthenticated(true);\n          \n          // Configurar token no axios\n          api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n        } else {\n          // Token expirado\n          console.log('Token expirado, removendo...');\n          logout();\n        }\n      }\n    } catch (error) {\n      console.error('Erro ao verificar token:', error);\n      logout();\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const login = async (email, password) => {\n    try {\n      setLoading(true);\n      \n      const response = await api.post('http://localhost:8000/api/auth/login', {\n        email,\n        password\n      });\n\n      if (response.data.success) {\n        const { token, user: userData } = response.data;\n        \n        // Salvar no localStorage\n        localStorage.setItem('token', token);\n        localStorage.setItem('user', JSON.stringify(userData));\n        \n        // Configurar header do axios\n        api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n        \n        // Atualizar estado\n        setUser(userData);\n        setIsAuthenticated(true);\n        \n        return { success: true, message: response.data.message };\n      } else {\n        return { success: false, message: response.data.message || 'Erro no login' };\n      }\n    } catch (error) {\n      console.error('Erro no login:', error);\n      \n      let message = 'Erro ao fazer login';\n      if (error.response) {\n        message = error.response.data?.message || 'Credenciais inválidas';\n      } else if (error.request) {\n        message = 'Erro de conexão. Verifique se o servidor está funcionando.';\n      }\n      \n      return { success: false, message };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const logout = () => {\n    // Limpar localStorage\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    \n    // Limpar header do axios\n    delete api.defaults.headers.common['Authorization'];\n    \n    // Atualizar estado\n    setUser(null);\n    setIsAuthenticated(false);\n  };\n\n  const refreshAuth = () => {\n    // Função para recarregar dados de autenticação\n    checkAuthStatus();\n  };\n\n  const value = {\n    user,\n    isAuthenticated,\n    loading,\n    login,\n    logout,\n    refreshAuth\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport default AuthContext;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}