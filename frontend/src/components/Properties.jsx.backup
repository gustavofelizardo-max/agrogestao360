import React, { useState, useEffect } from 'react';
import { api } from '../services/api';
import { toast } from 'react-hot-toast';
import { MapPin, Plus, Edit, Trash2, Search, Settings } from 'lucide-react';

const Properties = () => {
  const [properties, setProperties] = useState([]);
  const [cultures, setCultures] = useState([]);
  const [showForm, setShowForm] = useState(false);
  const [editingProperty, setEditingProperty] = useState(null);
  const [loading, setLoading] = useState(false);
  const [searchingCep, setSearchingCep] = useState(false);
  
  const [formData, setFormData] = useState({
    name: '',
    owner: '',
    document: '',
    phone: '',
    email: '',
    cep: '',
    address: '',
    number: '',
    complement: '',
    neighborhood: '',
    city: '',
    state: '',
    country: 'Brasil',
    latitude: '',
    longitude: '',
    area: '',
    arable_area: '',
    reserve_area: '',
    crops: '',
    employees: 0,
    has_irrigation: false,
    has_machinery: false,
    has_storage: false,
    description: ''
  });

  useEffect(() => {
    fetchProperties();
    fetchCultures();
  }, []);

  const fetchProperties = async () => {
    try {
      setLoading(true);
      const response = await api.get('/properties');
      console.log('‚úÖ Propriedades carregadas:', response.data);
      setProperties(response.data.properties || []);
    } catch (error) {
      console.error('‚ùå Erro ao buscar propriedades:', error);
      toast.error('Erro ao carregar propriedades');
    } finally {
      setLoading(false);
    }
  };

  const fetchCultures = async () => {
    try {
      const response = await api.get('/cultures');
      setCultures(response.data.cultures || []);
    } catch (error) {
      console.error('Erro ao buscar culturas:', error);
    }
  };

  const handleCepSearch = async () => {
    const cep = formData.cep.replace(/\D/g, '');
    
    if (cep.length !== 8) {
      toast.error('CEP deve ter 8 d√≠gitos');
      return;
    }

    setSearchingCep(true);
    try {
      const response = await fetch(`https://viacep.com.br/ws/${cep}/json/`);
      const data = await response.json();
      
      if (data.erro) {
        toast.error('CEP n√£o encontrado');
      } else {
        setFormData({
          ...formData,
          address: data.logradouro,
          neighborhood: data.bairro,
          city: data.localidade,
          state: data.uf,
          complement: data.complemento || formData.complement
        });
        
        try {
          const geoResponse = await fetch(
            `https://nominatim.openstreetmap.org/search?format=json&q=${data.logradouro},${data.localidade},${data.uf},Brasil&limit=1`
          );
          const geoData = await geoResponse.json();
          
          if (geoData && geoData[0]) {
            setFormData(prev => ({
              ...prev,
              latitude: geoData[0].lat,
              longitude: geoData[0].lon
            }));
          }
        } catch (geoError) {
          console.error('Erro ao buscar coordenadas:', geoError);
        }
        
        toast.success('Endere√ßo encontrado!');
      }
    } catch (error) {
      toast.error('Erro ao buscar CEP');
    } finally {
      setSearchingCep(false);
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    console.log('üìù Enviando dados da propriedade:', formData);
    
    try {
      let response;
      if (editingProperty) {
        response = await api.put(`/properties/${editingProperty.id}`, formData);
        toast.success('Propriedade atualizada com sucesso!');
      } else {
        response = await api.post('/properties', formData);
        toast.success('Propriedade cadastrada com sucesso!');
      }
      
      console.log('‚úÖ Resposta do servidor:', response.data);
      
      resetForm();
      fetchProperties();
    } catch (error) {
      console.error('‚ùå Erro ao salvar propriedade:', error);
      const message = error.response?.data?.message || 'Erro ao salvar propriedade';
      toast.error(message);
    }
  };

  const handleEdit = (property) => {
    console.log('üìù Editando propriedade:', property);
    setEditingProperty(property);
    setFormData(property);
    setShowForm(true);
  };

  const handleDelete = async (id) => {
    if (window.confirm('Confirma a exclus√£o desta propriedade?')) {
      try {
        await api.delete(`/properties/${id}`);
        toast.success('Propriedade exclu√≠da!');
        fetchProperties();
      } catch (error) {
        toast.error('Erro ao excluir propriedade');
      }
    }
  };

  const resetForm = () => {
    setFormData({
      name: '',
      owner: '',
      document: '',
      phone: '',
      email: '',
      cep: '',
      address: '',
      number: '',
      complement: '',
      neighborhood: '',
      city: '',
      state: '',
      country: 'Brasil',
      latitude: '',
      longitude: '',
      area: '',
      arable_area: '',
      reserve_area: '',
      crops: '',
      employees: 0,
      has_irrigation: false,
      has_machinery: false,
      has_storage: false,
      description: ''
    });
    setEditingProperty(null);
    setShowForm(false);
  };

  return (
    <div style={{ padding: '25px' }}>
      <div style={{ 
        display: 'flex', 
        justifyContent: 'space-between', 
        alignItems: 'center',
        marginBottom: '30px'
      }}>
        <h2 style={{ color: '#1e293b', margin: 0, fontSize: '28px', fontWeight: '600' }}>
          Gest√£o de Propriedades
        </h2>
        <div style={{ display: 'flex', gap: '10px' }}>
          <button 
            onClick={() => window.location.hash = '#cultures'}
            style={{
              display: 'flex',
              alignItems: 'center',
              gap: '8px',
              backgroundColor: '#059669',
              color: 'white',
              border: 'none',
              padding: '12px 20px',
              borderRadius: '8px',
              cursor: 'pointer',
              fontSize: '14px',
              fontWeight: '500'
            }}
          >
            <Settings size={16} />
            Gerenciar Culturas
          </button>
          <button 
            onClick={() => setShowForm(!showForm)}
            style={{
              display: 'flex',
              alignItems: 'center',
              gap: '8px',
              backgroundColor: '#3b82f6',
              color: 'white',
              border: 'none',
              padding: '12px 20px',
              borderRadius: '8px',
              cursor: 'pointer',
              fontSize: '14px',
              fontWeight: '500'
            }}
          >
            <Plus size={16} />
            {showForm ? 'Cancelar' : 'Nova Propriedade'}
          </button>
        </div>
      </div>

      {showForm && (
        <form 
          onSubmit={handleSubmit}
          style={{
            backgroundColor: '#fff',
            padding: '30px',
            borderRadius: '12px',
            boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',
            marginBottom: '30px',
            border: '1px solid #e2e8f0'
          }}
        >
          <h3 style={{ marginBottom: '25px', color: '#1e293b', fontSize: '20px', fontWeight: '600' }}>
            {editingProperty ? 'Editar Propriedade' : 'Nova Propriedade'}
          </h3>
          
          <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '20px', marginBottom: '20px' }}>
            <div>
              <label style={{ display: 'block', marginBottom: '8px', fontWeight: '500', color: '#374151' }}>
                Nome da Propriedade *
              </label>
              <input
                type="text"
                value={formData.name}
                onChange={(e) => setFormData({...formData, name: e.target.value})}
                required
                placeholder="Ex: Fazenda Santa Maria"
                style={{
                  width: '100%',
                  padding: '12px',
                  border: '1px solid #d1d5db',
                  borderRadius: '8px',
                  fontSize: '14px'
                }}
              />
            </div>
            <div>
              <label style={{ display: 'block', marginBottom: '8px', fontWeight: '500', color: '#374151' }}>
                Propriet√°rio *
              </label>
              <input
                type="text"
                value={formData.owner}
                onChange={(e) => setFormData({...formData, owner: e.target.value})}
                required
                placeholder="Nome do propriet√°rio"
                style={{
                  width: '100%',
                  padding: '12px',
                  border: '1px solid #d1d5db',
                  borderRadius: '8px',
                  fontSize: '14px'
                }}
              />
            </div>
          </div>

          <div style={{ display: 'grid', gridTemplateColumns: '200px 1fr auto', gap: '15px', marginBottom: '20px', alignItems: 'end' }}>
            <div>
              <label style={{ display: 'block', marginBottom: '8px', fontWeight: '500', color: '#374151' }}>
                CEP *
              </label>
              <input
                type="text"
                value={formData.cep}
                onChange={(e) => setFormData({...formData, cep: e.target.value.replace(/\D/g, '')})}
                maxLength="8"
                placeholder="00000000"
                style={{
                  width: '100%',
                  padding: '12px',
                  border: '1px solid #d1d5db',
                  borderRadius: '8px',
                  fontSize: '14px'
                }}
              />
            </div>
            <div>
              <label style={{ display: 'block', marginBottom: '8px', fontWeight: '500', color: '#374151' }}>
                Endere√ßo
              </label>
              <input
                type="text"
                value={formData.address}
                onChange={(e) => setFormData({...formData, address: e.target.value})}
                placeholder="Endere√ßo ser√° preenchido automaticamente"
                style={{
                  width: '100%',
                  padding: '12px',
                  border: '1px solid #d1d5db',
                  borderRadius: '8px',
                  fontSize: '14px'
                }}
              />
            </div>
            <button
              type="button"
              onClick={handleCepSearch}
              disabled={searchingCep || formData.cep.length !== 8}
              style={{
                display: 'flex',
                alignItems: 'center',
                gap: '8px',
                backgroundColor: searchingCep ? '#9ca3af' : '#059669',
                color: 'white',
                border: 'none',
                padding: '12px 16px',
                borderRadius: '8px',
                cursor: searchingCep ? 'not-allowed' : 'pointer',
                fontSize: '14px',
                fontWeight: '500'
              }}
            >
              <Search size={16} />
              {searchingCep ? 'Buscando...' : 'Buscar'}
            </button>
          </div>

          <div style={{ display: 'grid', gridTemplateColumns: 'auto 1fr 1fr 60px', gap: '15px', marginBottom: '20px' }}>
            <div>
              <label style={{ display: 'block', marginBottom: '8px', fontWeight: '500', color: '#374151' }}>
                N√∫mero
              </label>
              <input
                type="text"
                value={formData.number}
                onChange={(e) => setFormData({...formData, number: e.target.value})}
                style={{
                  width: '80px',
                  padding: '12px',
                  border: '1px solid #d1d5db',
                  borderRadius: '8px',
                  fontSize: '14px'
                }}
              />
            </div>
            <div>
              <label style={{ display: 'block', marginBottom: '8px', fontWeight: '500', color: '#374151' }}>
                Cidade
              </label>
              <input
                type="text"
                value={formData.city}
                onChange={(e) => setFormData({...formData, city: e.target.value})}
                style={{
                  width: '100%',
                  padding: '12px',
                  border: '1px solid #d1d5db',
                  borderRadius: '8px',
                  fontSize: '14px'
                }}
              />
            </div>
            <div>
              <label style={{ display: 'block', marginBottom: '8px', fontWeight: '500', color: '#374151' }}>
                Bairro
              </label>
              <input
                type="text"
                value={formData.neighborhood}
                onChange={(e) => setFormData({...formData, neighborhood: e.target.value})}
                style={{
                  width: '100%',
                  padding: '12px',
                  border: '1px solid #d1d5db',
                  borderRadius: '8px',
                  fontSize: '14px'
                }}
              />
            </div>
            <div>
              <label style={{ display: 'block', marginBottom: '8px', fontWeight: '500', color: '#374151' }}>
                UF
              </label>
              <input
                type="text"
                value={formData.state}
                onChange={(e) => setFormData({...formData, state: e.target.value.toUpperCase()})}
                maxLength="2"
                style={{
                  width: '100%',
                  padding: '12px',
                  border: '1px solid #d1d5db',
                  borderRadius: '8px',
                  fontSize: '14px',
                  textAlign: 'center'
                }}
              />
            </div>
          </div>

          <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr 1fr', gap: '15px', marginBottom: '20px' }}>
            <div>
              <label style={{ display: 'block', marginBottom: '8px', fontWeight: '500', color: '#374151' }}>
                √Årea Total (ha)
              </label>
              <input
                type="number"
                step="0.01"
                value={formData.area}
                onChange={(e) => setFormData({...formData, area: e.target.value})}
                style={{
                  width: '100%',
                  padding: '12px',
                  border: '1px solid #d1d5db',
                  borderRadius: '8px',
                  fontSize: '14px'
                }}
              />
            </div>
            <div>
              <label style={{ display: 'block', marginBottom: '8px', fontWeight: '500', color: '#374151' }}>
                √Årea Ar√°vel (ha)
              </label>
              <input
                type="number"
                step="0.01"
                value={formData.arable_area}
                onChange={(e) => setFormData({...formData, arable_area: e.target.value})}
                style={{
                  width: '100%',
                  padding: '12px',
                  border: '1px solid #d1d5db',
                  borderRadius: '8px',
                  fontSize: '14px'
                }}
              />
            </div>
            <div>
              <label style={{ display: 'block', marginBottom: '8px', fontWeight: '500', color: '#374151' }}>
                Reserva Legal (ha)
              </label>
              <input
                type="number"
                step="0.01"
                value={formData.reserve_area}
                onChange={(e) => setFormData({...formData, reserve_area: e.target.value})}
                style={{
                  width: '100%',
                  padding: '12px',
                  border: '1px solid #d1d5db',
                  borderRadius: '8px',
                  fontSize: '14px'
                }}
              />
            </div>
          </div>

          <div style={{ marginBottom: '20px' }}>
            <label style={{ display: 'block', marginBottom: '8px', fontWeight: '500', color: '#374151' }}>
              Culturas Principais
            </label>
            <select
              value={formData.crops}
              onChange={(e) => setFormData({...formData, crops: e.target.value})}
              style={{
                width: '100%',
                padding: '12px',
                border: '1px solid #d1d5db',
                borderRadius: '8px',
                fontSize: '14px',
                backgroundColor: 'white'
              }}
            >
              <option value="">Selecionar cultura principal</option>
              {cultures.map((culture) => (
                <option key={culture.id} value={culture.name}>
                  {culture.name} - {culture.category}
                </option>
              ))}
            </select>
          </div>

          <div style={{ display: 'flex', gap: '30px', marginBottom: '20px', flexWrap: 'wrap' }}>
            <label style={{ display: 'flex', alignItems: 'center', gap: '8px', cursor: 'pointer' }}>
              <input
                type="checkbox"
                checked={formData.has_irrigation}
                onChange={(e) => setFormData({...formData, has_irrigation: e.target.checked})}
                style={{ width: '16px', height: '16px' }}
              />
              <span style={{ color: '#374151', fontSize: '14px' }}>Possui Irriga√ß√£o</span>
            </label>
            <label style={{ display: 'flex', alignItems: 'center', gap: '8px', cursor: 'pointer' }}>
              <input
                type="checkbox"
                checked={formData.has_machinery}
                onChange={(e) => setFormData({...formData, has_machinery: e.target.checked})}
                style={{ width: '16px', height: '16px' }}
              />
              <span style={{ color: '#374151', fontSize: '14px' }}>Possui Maquin√°rio</span>
            </label>
            <label style={{ display: 'flex', alignItems: 'center', gap: '8px', cursor: 'pointer' }}>
              <input
                type="checkbox"
                checked={formData.has_storage}
                onChange={(e) => setFormData({...formData, has_storage: e.target.checked})}
                style={{ width: '16px', height: '16px' }}
              />
              <span style={{ color: '#374151', fontSize: '14px' }}>Possui Armazenamento</span>
            </label>
          </div>

          <div style={{ marginBottom: '25px' }}>
            <label style={{ display: 'block', marginBottom: '8px', fontWeight: '500', color: '#374151' }}>
              Descri√ß√£o Adicional
            </label>
            <textarea
              value={formData.description}
              onChange={(e) => setFormData({...formData, description: e.target.value})}
              rows="3"
              placeholder="Informa√ß√µes adicionais sobre a propriedade"
              style={{
                width: '100%',
                padding: '12px',
                border: '1px solid #d1d5db',
                borderRadius: '8px',
                fontSize: '14px',
                resize: 'vertical'
              }}
            />
          </div>

          <div style={{ display: 'flex', gap: '15px' }}>
            <button
              type="submit"
              style={{
                backgroundColor: '#3b82f6',
                color: 'white',
                border: 'none',
                padding: '14px 30px',
                borderRadius: '8px',
                cursor: 'pointer',
                fontSize: '14px',
                fontWeight: '600'
              }}
            >
              {editingProperty ? 'Atualizar Propriedade' : 'Cadastrar Propriedade'}
            </button>
            <button
              type="button"
              onClick={resetForm}
              style={{
                backgroundColor: '#e5e7eb',
                color: '#374151',
                border: 'none',
                padding: '14px 30px',
                borderRadius: '8px',
                cursor: 'pointer',
                fontSize: '14px',
                fontWeight: '600'
              }}
            >
              Cancelar
            </button>
          </div>
        </form>
      )}

      {loading ? (
        <div style={{ textAlign: 'center', padding: '40px' }}>
          <div style={{
            width: '40px',
            height: '40px',
            border: '3px solid #f3f3f3',
            borderTop: '3px solid #3b82f6',
            borderRadius: '50%',
            animation: 'spin 1s linear infinite',
            margin: '0 auto'
          }}></div>
          <p style={{ marginTop: '15px', color: '#6b7280' }}>Carregando propriedades...</p>
        </div>
      ) : (
        <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fill, minmax(350px, 1fr))', gap: '20px' }}>
          {properties.map((property) => (
            <div
              key={property.id}
              style={{
                backgroundColor: '#fff',
                padding: '25px',
                borderRadius: '12px',
                boxShadow: '0 4px 6px rgba(0, 0, 0, 0.05)',
                border: '1px solid #e2e8f0',
                transition: 'transform 0.2s, box-shadow 0.2s'
              }}
              onMouseOver={(e) => {
                e.currentTarget.style.transform = 'translateY(-2px)';
                e.currentTarget.style.boxShadow = '0 8px 15px rgba(0, 0, 0, 0.1)';
              }}
              onMouseOut={(e) => {
                e.currentTarget.style.transform = 'translateY(0)';
                e.currentTarget.style.boxShadow = '0 4px 6px rgba(0, 0, 0, 0.05)';
              }}
            >
              <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', marginBottom: '15px' }}>
                <h3 style={{ margin: 0, color: '#1e293b', fontSize: '18px', fontWeight: '600' }}>
                  {property.name}
                </h3>
                <div style={{ display: 'flex', gap: '8px' }}>
                  <button
                    onClick={() => handleEdit(property)}
                    style={{
                      backgroundColor: '#3b82f6',
                      color: 'white',
                      border: 'none',
                      padding: '6px',
                      borderRadius: '6px',
                      cursor: 'pointer'
                    }}
                  >
                    <Edit size={14} />
                  </button>
                  <button
                    onClick={() => handleDelete(property.id)}
                    style={{
                      backgroundColor: '#ef4444',
                      color: 'white',
                      border: 'none',
                      padding: '6px',
                      borderRadius: '6px',
                      cursor: 'pointer'
                    }}
                  >
                    <Trash2 size={14} />
                  </button>
                </div>
              </div>
              
              <p style={{ margin: '8px 0', color: '#6b7280', fontSize: '14px' }}>
                <strong style={{ color: '#374151' }}>Propriet√°rio:</strong> {property.owner}
              </p>
              
              {property.city && (
                <p style={{ margin: '8px 0', color: '#6b7280', fontSize: '14px', display: 'flex', alignItems: 'center', gap: '5px' }}>
                  <MapPin size={14} color="#059669" />
                  {property.city} - {property.state}
                </p>
              )}
              
              {property.area && (
                <p style={{ margin: '8px 0', color: '#6b7280', fontSize: '14px' }}>
                  <strong style={{ color: '#374151' }}>√Årea:</strong> {property.area} ha
                </p>
              )}
              
              {property.crops && (
                <p style={{ margin: '8px 0', color: '#6b7280', fontSize: '14px' }}>
                  <strong style={{ color: '#374151' }}>Cultura:</strong> {property.crops}
                </p>
              )}

              <div style={{ marginTop: '15px', display: 'flex', gap: '8px', flexWrap: 'wrap' }}>
                {property.has_irrigation && (
                  <span style={{
                    backgroundColor: '#dbeafe',
                    color: '#1e40af',
                    padding: '3px 8px',
                    borderRadius: '12px',
                    fontSize: '12px',
                    fontWeight: '500'
                  }}>
                    Irriga√ß√£o
                  </span>
                )}
                {property.has_machinery && (
                  <span style={{
                    backgroundColor: '#fed7aa',
                    color: '#ea580c',
                    padding: '3px 8px',
                    borderRadius: '12px',
                    fontSize: '12px',
                    fontWeight: '500'
                  }}>
                    Maquin√°rio
                  </span>
                )}
                {property.has_storage && (
                  <span style={{
                    backgroundColor: '#e9d5ff',
                    color: '#7c2d12',
                    padding: '3px 8px',
                    borderRadius: '12px',
                    fontSize: '12px',
                    fontWeight: '500'
                  }}>
                    Armazenamento
                  </span>
                )}
              </div>
            </div>
          ))}
        </div>
      )}

      {!loading && properties.length === 0 && (
        <div style={{
          backgroundColor: '#fff',
          padding: '60px',
          borderRadius: '16px',
          boxShadow: '0 4px 6px rgba(0, 0, 0, 0.05)',
          border: '1px solid #e2e8f0',
          textAlign: 'center'
        }}>
          <MapPin size={64} color="#d1d5db" style={{ marginBottom: '20px' }} />
          <h3 style={{ color: '#6b7280', marginBottom: '15px', fontSize: '20px' }}>
            Nenhuma propriedade cadastrada
          </h3>
          <p style={{ color: '#9ca3af', marginBottom: '20px', fontSize: '16px' }}>
            Comece cadastrando sua primeira propriedade para come√ßar a usar o sistema
          </p>
          <button
            onClick={() => setShowForm(true)}
            style={{
              backgroundColor: '#3b82f6',
              color: 'white',
              border: 'none',
              padding: '12px 30px',
              borderRadius: '8px',
              cursor: 'pointer',
              fontSize: '14px',
              fontWeight: '500'
            }}
          >
            Cadastrar Primeira Propriedade
          </button>
        </div>
      )}

      <style jsx>{`
        @keyframes spin {
          0% { transform: rotate(0deg); }
          100% { transform: rotate(360deg); }
        }
      `}</style>
    </div>
  );
};

export default Properties;
